// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  googleAccessToken  String? // Google OAuth access token
  googleRefreshToken String? // Google OAuth refresh token
  googleTokenExpiry  DateTime? // When the Google access token expires
  plans              Plan[]
  appointments       Appointment[]
  notifications      Notification[]
  calendarSettings   CalendarIntegration?
}

model Plan {
  id           String        @id @default(cuid())
  name         String
  goal         String
  category     String
  currentLevel String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Appointment {
  id          String   @id @default(cuid())
  dateStart   DateTime
  details     String
  amount      Int
  measureUnit String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  planId      String
  plan        Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarIntegration {
  id                 String    @id @default(cuid())
  exportAsTask       Boolean   @default(false) // Export as Google Tasks instead of Calendar events
  includeAmount      Boolean   @default(true) // Include amount in event title
  includeMeasureUnit Boolean   @default(true) // Include measure unit in event title
  addReminders       Boolean   @default(true) // Add reminders to events
  reminderMinutes    Int       @default(30) // Minutes before event to send reminder
  lastSyncedAt       DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String    @unique // One-to-one relation with User
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
